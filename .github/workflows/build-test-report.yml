# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Grant execute permissions for gradlew
        run: chmod +x gradlew
      
       # Runs the Gradle build task
      - name: Run the Gradle Build
        run: ./gradlew build

     # Runs the Gradle build task, but without running the JUnit tests
      - name: Run the Gradle Build
        run: ./gradlew build -x test
        
      # Builds a 'fat' jar file with the dependencies from Gradle
      - name: Archive Jar with Dependencies
        uses: actions/upload-artifact@v4.4.2
        with:
          name: Jar with Dependencies
          path: build/libs
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it   
      - uses: actions/checkout@v4
      
      - name: Grant execute permissions for gradlew
        run: chmod +x gradlew
 
      # Runs the Gradle test task
      - name: Test with Gradle
        run: ./gradlew test --tests "*"
        
      # Builds a zip file with JUnit test report in it    
      - name: Archive test report
        uses: actions/upload-artifact@v4.4.2
        with:
          name: Test report
          path: build/reports/tests/test
             
      # Builds a zip file with JUnit code covearge report in it    
      - name: Archive coverage report
        uses: actions/upload-artifact@v4.4.2
        with:
          name: Code Coverage report
          path: build/reports/jacoco/test/html

  documentation: 
    runs-on: ubuntu-latest
    needs: test
    steps:
    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it 
      - uses: actions/checkout@v4

      - name: Grant execute permissions for gradlew
        run: chmod +x gradlew
      
      # Runs the Gradle dokkaHtml task
      - name: Dokka with Gradle
        run: ./gradlew dokkaHtml
      
      # Builds a zip file with the KDoc generated website in it 
      - name: Archive KDoc Documentation
        uses: actions/upload-artifact@v4.4.2
        with:
          name: KDoc Documentation Site
          path: build/dokka/html
          
  license_report: 
    runs-on: ubuntu-latest
    needs: documentation
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it 
      - uses: actions/checkout@v4

      - name: Grant execute permissions for gradlew
        run: chmod +x gradlew
        
       # Runs the Gradle checkLicense chiking
      - name: Generate License Report
        run: ./gradlew generateLicenseReport
        
        # Builds a zip file checkLicense report
      - name: Archive License Report
        uses: actions/upload-artifact@v4.4.2
        with:
          name: License Report
          path: build/reports/dependency-license/index.html
